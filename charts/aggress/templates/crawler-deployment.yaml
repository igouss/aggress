{ { - if .Values.crawler.enabled } }
apiVersion: apps/v1
kind: Deployment
metadata:
  name: { { include "aggress.fullname" . } }-crawler
  labels:
    {{- include "aggress.labels" . | nindent 4 }}
    app.kubernetes.io/component: crawler
spec:
  replicas: { { .Values.crawler.replicaCount } }
  selector:
    matchLabels:
      { { - include "aggress.selectorLabels" . | nindent 6 } }
      app.kubernetes.io/component: crawler
  template:
    metadata:
      annotations:
        checksum/config: { { include (print $.Template.BasePath "/configmap.yaml") . | sha256sum } }
        checksum/secret: { { include (print $.Template.BasePath "/secret.yaml") . | sha256sum } }
      labels:
        { { - include "aggress.selectorLabels" . | nindent 8 } }
        app.kubernetes.io/component: crawler
    spec:
      { { - with .Values.image.pullSecrets } }
      imagePullSecrets:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      serviceAccountName: { { include "aggress.serviceAccountName" . } }
      securityContext:
        { { - toYaml .Values.podSecurityContext | nindent 8 } }
      containers:
        - name: crawler
          securityContext:
            { { - toYaml .Values.securityContext | nindent 12 } }
          image: "{{ .Values.image.registry }}/{{ .Values.crawler.image.repository }}:{{ .Values.crawler.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: { { .Values.image.pullPolicy } }
          ports:
            - name: debug
              containerPort: 8000
              protocol: TCP
            { { - if .Values.crawler.debug.enabled } }
            - name: jvm-debug
              containerPort: { { .Values.crawler.debug.port } }
              protocol: TCP
            { { - end } }
          env:
            - name: JAVA_OPTS
              value: "{{ .Values.crawler.javaOpts }}"
            - name: REDIS_HOST
              value: { { include "aggress.redis.host" . } }
            - name: REDIS_PORT
              value: { { include "aggress.redis.port" . | quote } }
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: { { include "aggress.fullname" . } }-secret
                  key: redis-password
            - name: ELASTIC_HOST
              value: { { include "aggress.elasticsearch.host" . } }
            - name: ELASTIC_PORT
              value: { { include "aggress.elasticsearch.port" . | quote } }
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: { { include "aggress.kafka.bootstrapServers" . } }
            - name: DEPLOYMENT_ENV
              value: { { .Values.config.environment } }
            - name: LOGGING_LEVEL
              value: { { .Values.config.logging.level } }
            - name: CRAWLER_BATCH_SIZE
              value: { { .Values.crawler.config.batchSize | quote } }
            - name: CRAWLER_TIMEOUT
              value: { { .Values.crawler.config.timeout | quote } }
            - name: CRAWLER_PARALLEL_THREADS
              value: { { .Values.crawler.config.parallelThreads | quote } }
            { { - if .Values.config.crawler.login } }
            - name: CRAWLER_LOGIN
              valueFrom:
                secretKeyRef:
                  name: { { include "aggress.fullname" . } }-secret
                  key: crawler-login
            { { - end } }
            { { - if .Values.config.crawler.password } }
            - name: CRAWLER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: { { include "aggress.fullname" . } }-secret
                  key: crawler-password
            { { - end } }
          volumeMounts:
            - name: config
              mountPath: /opt/crawler/config
              readOnly: true
            - name: ssl-certs
              mountPath: /opt/crawler/certs
              readOnly: true
          { { - if .Values.crawler.livenessProbe.enabled } }
          livenessProbe:
            httpGet:
              path: /health
              port: debug
            initialDelaySeconds: { { .Values.crawler.livenessProbe.initialDelaySeconds } }
            periodSeconds: { { .Values.crawler.livenessProbe.periodSeconds } }
            timeoutSeconds: { { .Values.crawler.livenessProbe.timeoutSeconds } }
            failureThreshold: { { .Values.crawler.livenessProbe.failureThreshold } }
          { { - end } }
          { { - if .Values.crawler.readinessProbe.enabled } }
          readinessProbe:
            httpGet:
              path: /ready
              port: debug
            initialDelaySeconds: { { .Values.crawler.readinessProbe.initialDelaySeconds } }
            periodSeconds: { { .Values.crawler.readinessProbe.periodSeconds } }
            timeoutSeconds: { { .Values.crawler.readinessProbe.timeoutSeconds } }
            failureThreshold: { { .Values.crawler.readinessProbe.failureThreshold } }
          { { - end } }
          resources:
            { { - toYaml .Values.crawler.resources | nindent 12 } }
      volumes:
        - name: config
          configMap:
            name: { { include "aggress.fullname" . } }-config
        - name: ssl-certs
        secret:
          secretName: { { include "aggress.fullname" . } }-ssl-certs
          optional: true
      { { - with .Values.nodeSelector } }
      nodeSelector:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      { { - with .Values.affinity } }
      affinity:
        { { - toYaml . | nindent 8 } }
      { { - end } }
      { { - with .Values.tolerations } }
      tolerations:
        { { - toYaml . | nindent 8 } }
      { { - end } }
  { { - end } }