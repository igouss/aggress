group 'com.naxsoft'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'jsonschema2pojo'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.jsonschema2pojo', name: 'jsonschema2pojo-gradle-plugin', version: '0.+'
    }
}
dependencies {
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: '1.7.+'
    compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.2.+'
    compile group: 'org.jsoup', name: 'jsoup', version: '1.8.+'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.+'
    compile group: 'org.hibernate', name: 'hibernate-java8', version: '5.+'
    compile group: 'org.hibernate', name: 'hibernate-hikaricp', version: '5.+'
    compile group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.+'
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.+'

    compile group: 'org.glassfish.web', name: 'el-impl', version: '2.+'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.4-1201-jdbc41'
    compile group: 'com.impossibl.pgjdbc-ng', name: 'pgjdbc-ng', version: '0.5'
    compile group: 'com.zaxxer', name: 'HikariCP-java6', version: '2.+'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.+'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
    compile group: 'io.reactivex', name: 'rxjava', version: '1.0.+'
    compile group: 'io.reactivex', name: 'rxjava-async-util', version: '0.21.+'
    compile group: 'io.reactivex', name: 'rxjava-computation-expressions', version: '0.21.+'
    compile group: 'io.reactivex', name: 'rxjava-debug', version: '1.+'
    compile group: 'io.reactivex', name: 'rxjava-guava', version: '1.+'
    compile group: 'io.reactivex', name: 'rxjava-joins', version: '0.+'
    compile group: 'io.reactivex', name: 'rxjava-math', version: '1.+'
    compile group: 'io.reactivex', name: 'rxjava-reactive-streams', version: '1.+'
    compile group: 'io.reactivex', name: 'rxjava-string', version: '0.+'
    compile group: 'com.google.guava', name: 'guava', version: '18.+'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.+'
    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.+'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.3.1'
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.4.4'

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Each configuration is set to the default value
jsonSchema2Pojo {
    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = false

    // Whether to use primitives (long, double, boolean) instead of wrapper types where possible
    // when generating bean properties (has the side-effect of making those properties non-null).
    usePrimitives = true

    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${project.projectDir}/schema.json")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.projectDir}/src/main/java")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'com.naxsoft.schema'

    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
    propertyWordDelimiters = [] as char[]

    // Whether to use the java type long (or Long) instead of int (or Integer) when representing the
    // JSON Schema type 'integer'.
    useLongIntegers = true

    // Whether to use the java type double (or Double) instead of float (or Float) when representing
    // the JSON Schema type 'number'.
    useDoubleNumbers = true

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = false

    // Whether to include a toString method in generated Java types.
    includeToString = false

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jackson1 (apply annotations from the Jackson 1.x library)
    //  - gson (apply annotations from the Gson library)
    //  - none (apply no annotations at all)
    annotationStyle = 'gson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.NoopAnnotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = false

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of json data)
    //  - json (documents that represent an example of the kind of json data that the generated Java types
    //          will be mapped to)
    sourceType = 'json'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = false

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals,
    // hashCode and toString methods.
    useCommonsLang3 = false

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // **EXPERIMENTAL** Whether to make the generated types Parcelable for Android
    parcelable = false
}